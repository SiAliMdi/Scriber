from uuid import uuid4
from django.db import models


class AnnotationsModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4)
    VALIDATION_STATES = [
        ('unannotated', 'Non annotée'),
        ('annotated', 'Annotée'),
        ('validated', 'Validée'),
        ('corrected', 'Corrigée'),
    ]

    state = models.CharField(
        max_length=12,
        choices=VALIDATION_STATES,
        default='annotated',
        blank=True,
        null=True,
    )
    text = models.TextField(blank=True, null=True, default="", max_length=32_768)
    start_offset = models.IntegerField(blank=True, null=True, default=-1)
    end_offset = models.IntegerField(blank=True, null=True, default=-1)
    label = models.ForeignKey('datasets.Labels', on_delete=models.DO_NOTHING, related_name='label_annotation', blank=False, null=False)
    state = models.CharField(max_length=255, blank=True, null=True, default='annotated')
    decision = models.ForeignKey('decisions.DatasetsDecisionsModel', on_delete=models.DO_NOTHING, related_name='decision_annotation', blank=True, null=True)
    # to add: annotator (user) or (model)
    # human_annotator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='user_annotator', blank=True, null=True)
    
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='annotations_creator', blank=False, null=False)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    updator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='annotations_updater', blank=True, null=True)
    deleted = models.BooleanField(default=False)
    # objects = models.Manager()

    
    def save(self, *args, **kwargs):
        self.clean()
        return super().save(*args, **kwargs)
    
    class Meta:
        abstract = True
        ordering = ['-created_at']
        indexes = [ 
            # models.Index(fields=['label',]),
            # models.Index(fields=['decision',]),
                   ]

class BinaryAnnotationsModel(AnnotationsModel):
    '''
    Supposed to contain the binary annotations for a whole decision
    '''
    
    start_offset = None
    end_offset = None
    text = None
    model_annotator = models.ForeignKey('ai_models.Ai_ModelsModel', on_delete=models.DO_NOTHING, related_name='model_annotator', blank=True, null=True)
    trained_model_annotator = models.ForeignKey('ai_models.AiModelTrainingsModel', on_delete=models.DO_NOTHING, related_name='trained_model_annotator', blank=True, null=True)
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='binary_annotations_creator', blank=True, null=True)
    decision = models.ForeignKey('decisions.DatasetsDecisionsModel', on_delete=models.DO_NOTHING, related_name='binary_annotations_decision', blank=False, null=False)
    # human_annotator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='binary_annotations_human_annotator', blank=True, null=True)
    label = models.ForeignKey('datasets.Labels', on_delete=models.DO_NOTHING, related_name='binary_annotations_label', blank=False, null=False)
    updator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='binary_annotations_updater', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    class Meta:
        db_table = "binary_annotations"
        indexes = [
            models.Index(fields=[ 'label',]),
            models.Index(fields=[ 'decision',]),]
        ordering = ['-created_at']
        
        
    def save(self, *args, **kwargs):
        self.clean()
        return super().save(*args, **kwargs)

class TextAnnotationsModel(AnnotationsModel):
    '''
    Single text annotation
    '''
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='text_annotations_creator', blank=False, null=False)
    decision = models.ForeignKey('decisions.DatasetsDecisionsModel', on_delete=models.DO_NOTHING, related_name='text_annotations_decision', blank=False, null=False)
    label = models.ForeignKey('datasets.Labels', on_delete=models.DO_NOTHING, related_name='text_annotations_label', blank=False, null=False)
    updator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='text_annotations_updater', blank=True, null=True)
    class Meta(AnnotationsModel.Meta):
        db_table = "text_annotations"


class ExtractionAnnotationsModel(models.Model):
    '''
    Supposed to contain the extraction annotations generated by a prompt
    '''
    id = models.UUIDField(primary_key=True, default=uuid4)
    decision = models.ForeignKey('decisions.DatasetsDecisionsModel', on_delete=models.DO_NOTHING, related_name='ext_annotations_decision', blank=False, null=False)

    llm_json_result = models.JSONField(blank=True, null=True)
    model_annotator = models.CharField(max_length=50, blank=True, null=True)
    state = models.CharField(max_length=12, blank=True, null=True)
    creator = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='extraction_annotations_creator', blank=False, null=False)
    updater = models.ForeignKey('users.ScriberUsers', on_delete=models.DO_NOTHING, related_name='extraction_annotations_updater', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    deleted = models.BooleanField(default=False)
    class Meta(AnnotationsModel.Meta):
        db_table = "extraction_annotations"

class ExtractionTextAnnotationsModel(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid4)
    extraction = models.ForeignKey('annotations.ExtractionAnnotationsModel', on_delete=models.DO_NOTHING, related_name='extraction_text', blank=False, null=False)
    text = models.TextField(blank=True, null=True, default="", max_length=8_000)
    start_offset = models.IntegerField(blank=True, null=True, default=-1)
    end_offset = models.IntegerField(blank=True, null=True, default=-1)
    label = models.TextField(blank=True, null=True, default="", max_length=2_00)
    
    class Meta:
        db_table = "extraction_text_annotations"
        indexes = [
            models.Index(fields=['extraction',]),
                   ]
        
 

 